#!/usr/bin/env python
# -*- encoding: utf-8 -*-
##############################################################################
#
##############################################################################

from openerp.tools.translate import _
from openerp.osv import fields, osv
from datetime import datetime
import openerp.netsvc

class account_analytic_schedule_line(osv.osv):
    _name = 'account.analytic.schedule.line'
    _description = 'Account Analytic Schedule Line'

    def action_invoice_create(self, cr, uid, ids, states=None, date_invoice = False, context=None):
        schedule_obj = self.pool.get('account.analytic.schedule.line')
        analytic_account_obj = self.pool.get('account.analytic.account')
        res_partner_obj = self.pool.get('res.partner')
        account_payment_term_obj = self.pool.get('account.payment.term')
        invoice_obj = self.pool.get('account.invoice')
        product_obj = self.pool.get('product.product')
        pro_price_obj = self.pool.get('product.pricelist')
        fiscal_pos_obj = self.pool.get('account.fiscal.position')
        product_uom_obj = self.pool.get('product.uom')
        invoice_line_obj = self.pool.get('account.invoice.line')
        invoices = []
        if context is None:
            context = {}

        for line in self.pool.get('account.analytic.schedule.line').browse(cr, uid, ids, context=context):
            partner = line.analytic_account_id.partner_id
            if (not partner) or not (line.analytic_account_id.pricelist_id):
                raise osv.except_osv(_('Analytic Account incomplete'),
                        _('Please fill in the Partner or Customer and Sale Pricelist fields in the Analytic Account:\n%s') % (account.name,))

            date_due = False
            if partner.property_payment_term:
                pterm_list= account_payment_term_obj.compute(cr, uid,
                        partner.property_payment_term.id, value=1,
                        date_ref=date_invoice)
                if pterm_list:
                    pterm_list = [term[0] for term in pterm_list]
                    pterm_list.sort()
                    date_due = pterm_list[-1]

            curr_invoice = {
                'name': line.analytic_account_id.name,
                'partner_id': line.analytic_account_id.partner_id.id,
                'payment_term': partner.property_payment_term.id or False,
                'account_id': partner.property_account_receivable.id,
                'currency_id': line.analytic_account_id.pricelist_id.currency_id.id,
                'date_invoice': date_invoice,
                'date_due': date_due,
                'fiscal_position': partner.property_account_position.id 
            }
            last_invoice = invoice_obj.create(cr, uid, curr_invoice, context=context)
            invoices.append(last_invoice)

            taxes = [line.tax_code_id]
            print'TAXES:',taxes
            tax = fiscal_pos_obj.map_tax(cr, uid, line.analytic_account_id.partner_id.property_account_position, taxes, context=context)

            account_id = line.cost_account_id.id
            if not account_id:
                raise osv.except_osv(_("Configuration Error"), _("No income account defined for product '%s'") % product.name)
            curr_line = {
                'price_unit': line.amount,
                'quantity': 1,
                'discount':0,
                'invoice_line_tax_id': [(6,0,tax )],
                'invoice_id': last_invoice,
                'name': line.name,
                'account_id': account_id,
                'account_analytic_id': line.analytic_account_id.id,
            }

            invoice_line_obj.create(cr, uid, curr_line, context=context)
            cr.execute("update account_analytic_schedule_line set invoice_id = %s WHERE id = %s", (last_invoice, line.id,))

            invoice_obj.button_reset_taxes(cr, uid, [last_invoice], context)
        return invoices

    def _progress_invoice_pct(self, cr, uid, ids, name, arg, context=None):
        res = {}
        for project in self.browse(cr, uid, ids):
            res[project.id] = 0.0
            if project.id:
                if project.amount_max == 0:
                    res[project.id] = 0
                else:
                    res[project.id] = 100 * project.ca_invoiced / project.amount_max
        return res

    def default_get(self, cr, uid, fields, context=None):
        res = super(account_analytic_schedule_line, self).default_get(cr, uid, fields, context=context)
        res['cost_account_id'] = 458
        res['tax_code_id'] = 1
        return res

    _columns = {
        'analytic_account_id': fields.many2one('account.analytic.account', 'Analytic Account', select=True),
        'scheduled_date': fields.date('Scheduled Date', required=True),
        'name': fields.char('Description', size=64, required=True),
        'amount': fields.float('Amount', required=True),
        'cost_account_id': fields.many2one('account.account', 'Product Account', required=True),
        'tax_code_id': fields.many2one('account.tax', 'Tax Code', required=True),
        'invoice_date': fields.date('Invoice Date'),
        'invoice_id': fields.many2one('account.invoice', 'Invoice', select=True),
        'amount_max': fields.related('analytic_account_id', 'est_total', type='float', relation='account.analytic.account', string='Expected Amt', readonly=True),
        'total_sched_amount': fields.related('analytic_account_id', 'total_sched_amount', type='float', relation='account.analytic.account', string='Scheduled Amt', readonly=True),
        'ca_invoiced': fields.related('analytic_account_id', 'invoiced_total', type='float', relation='account.analytic.account', string='Invoiced Amt', readonly=True),
        'remaining_ca': fields.related('analytic_account_id', 'remaining_total', type='float', relation='account.analytic.account', string='Remaining Amt', readonly=True),
        'progress_invoice_pct': fields.function(_progress_invoice_pct, string='% Invoiced', type='float'),
    }

account_analytic_schedule_line()

class account_analytic_account(osv.osv):
    _inherit = 'account.analytic.account'

    _columns = {
        'invoice_schedule': fields.boolean('Invoice Schedule'),
        'total_sched_amount': fields.float('Total Scheduled Amount'),
        'invoice_schedule_line_ids': fields.one2many('account.analytic.schedule.line', 'analytic_account_id', 'Invoice Schedule Lines'),
    }

account_analytic_account()

class contract_make_invoice(osv.osv_memory):
    _name = "contract.make.invoice"
    _description = "Contract Make Invoice"

    def make_invoices(self, cr, uid, ids, context=None):
        contract_obj = self.pool.get('account.analytic.schedule.line')
        mod_obj = self.pool.get('ir.model.data')
        act_obj = self.pool.get('ir.actions.act_window')
        newinv = []
        if context is None:
            context = {}
        data = self.read(cr, uid, ids)[0]
        contract_obj.action_invoice_create(cr, uid, context.get(('active_ids'), []), date_invoice = data['invoice_date'])

        for o in contract_obj.browse(cr, uid, context.get(('active_ids'), []), context=context):
            newinv.append(o.invoice_id.id)

        result = mod_obj.get_object_reference(cr, uid, 'account', 'action_invoice_tree1')
        id = result and result[1] or False
        result = act_obj.read(cr, uid, [id], context=context)[0]
        result['domain'] = "[('id','in', ["+','.join(map(str,newinv))+"])]"

        return result

    _columns = {
        'invoice_date': fields.date('Invoice Date'),
    }

contract_make_invoice()

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:# -*- coding: utf-8 -*-

