# -*- coding: utf-8 -*-
###############################################
from osv import fields,osv
from tools.sql import drop_view_if_exists

class stock_move_by_location(osv.osv):
     _name = "stock_move_by_location"
     _description = "Location Moves"
     _auto = False

     _columns = {
       'id'                 : fields.char    ('id',size=16, readonly=True),
       'description'        : fields.char    ('Description', size=16, readonly=True),
       'location_id'        : fields.many2one('stock.location','Location', select=True, readonly=True),
       'product_id'         : fields.many2one('product.product','Product', select=True, readonly=True),
       'categ_id'           : fields.many2one('product.category','Product Category', select=True, readonly=True),
#       'categ_id'           : fields.related ('product_id','categ_id',type="many2one", relation="product.category", string='Category',readonly=True),
       'name'               : fields.float   ('Quantity', digits=(16,2), readonly=True),
       'uom_id'             : fields.related ('product_id', 'uom_id', type="many2one", relation="product.uom", string="UoM", readonly = True ),
       'product_qty_pending': fields.float   ('Quantity Pending', digits=(16,2), readonly=True),
       'date'               : fields.datetime('Date Planned', select=True, readonly=True),
       'prodlot_id'         : fields.many2one('stock.production.lot', 'Production lot', select=True, readonly=True),
       'picking_id'         : fields.many2one('stock.picking', 'Packing', select=True, readonly=True),
       'company_id': fields.many2one('res.company', 'Company', readonly=True),
       'origin': fields.char('Origin', readonly=True),
       'state': fields.char('State', readonly=True),
       'standard_price': fields.float('Cost Price', digits=(16,4), readonly=True),
       'valuation': fields.char('Inventory Valuation'),
       'valuation_account_id': fields.many2one('account.account','Valuation Account', select=True, readonly=True),
}
     #select get_id('stock_product_by_location',l.id,product_id,0),
     def init(self, cr):
          drop_view_if_exists(cr, 'stock_product_by_location_prodlot')
          drop_view_if_exists(cr, 'stock_product_by_location')
          drop_view_if_exists(cr, 'stock_move_by_location')

          cr.execute("""create or replace view stock_move_by_location
as
select i.id ,
 l.id as location_id,product_id,
 i.name as description,
 case when i.state ='done' then product_qty else 0 end as name,
 case when i.state !='done' then product_qty else 0 end as product_qty_pending,
 date, prodlot_id, origin, i.state,
 picking_id,l.company_id,t.categ_id,l.available_shortage, t.standard_price, 
 case when p.valuation='real_time' then 'Real Time' else 'Manual Periodic' end as valuation,
 (select cast(replace(value_reference, 'account.account,', '') as integer) from ir_property where
    name = 'property_stock_valuation_account_id' and
    res_id = ('product.category,' || t.categ_id)
 ) as valuation_account_id
from stock_location l,
     stock_move i,
     product_product p,
     product_template t
where l.usage='internal'
  and i.location_dest_id = l.id
  and i.state != 'cancel'
  and i.company_id = l.company_id
  and i.product_id = p.id
  and p.product_tmpl_id = t.id
union all
select -o.id ,
l.id as location_id ,product_id,
 o.name as description,
 case when o.state ='done' then -product_qty else 0 end as name,
 case when o.state !='done' then -product_qty else 0 end as product_qty_pending,
 date, prodlot_id, origin, o.state,
 picking_id,l.company_id,t.categ_id,l.available_shortage, t.standard_price, 
 case when p.valuation='real_time' then 'Real Time' else 'Manual Periodic' end as valuation,
 (select cast(replace(value_reference, 'account.account,', '') as integer) from ir_property where
    name = 'property_stock_valuation_account_id' and
    res_id = ('product.category,' || t.categ_id)
 ) as valuation_account_id
from stock_location l,
     stock_move o,
     product_product p,
     product_template t
where l.usage='internal'
  and o.location_id = l.id
  and o.state != 'cancel'
  and o.company_id = l.company_id
  and o.product_id = p.id
  and p.product_tmpl_id = t.id
order by date
;""")

stock_move_by_location()


class stock_product_by_location(osv.osv):
     _name = "stock_product_by_location"
     _description = "Product Stock Sum"
     _auto = False

     _columns = {
       'id'                 : fields.char    ('id',size=16, readonly=True),
       'location_id'        : fields.many2one('stock.location','Location', select=True, required=True, readonly=True),
       'product_id'         : fields.many2one('product.product','Product', select=True, required=True, readonly=True),
       'uom_id'             : fields.related ('product_id', 'uom_id', type="many2one", relation="product.uom", string="UoM", readonly = True ),
       'categ_id'           : fields.many2one('product.category','Product Category', select=True, readonly=True),
#       'categ_id'           : fields.related ('product_id','categ_id', type="many2one", relation="product.category", string='Category',readonly=True, select=True),
       'cost_method'        : fields.related ('product_id', 'cost_method', type="char", relation="product.product", string="Cost Method", readonly = True ),
       'name'               : fields.float   ('Quantity', digits=(16,2), readonly=True),
       'product_qty_pending': fields.float   ('Quantity Pending', digits=(16,2), readonly=True),
       'company_id': fields.many2one('res.company', 'Company', readonly=True),
       'standard_price': fields.float('Cost Price', digits=(16,4), readonly=True),
       'inventory_value': fields.float('Inventory Value', readonly=True),
       'rt_inventory_value': fields.float('RT Inv. Value', readonly=True),
       'valuation': fields.char('Inventory Valuation'),
       'valuation_account_id': fields.many2one('account.account','Valuation Account', select=True, readonly=True),
}
     _defaults = {
}


     def init(self, cr):
          drop_view_if_exists(cr, 'stock_product_by_location')
     
          cr.execute("""create or replace view stock_product_by_location
as
select min(id) as id ,location_id,product_id,
       sum(name) as name, sum(product_qty_pending) as product_qty_pending, 
       company_id, categ_id, min(standard_price) as standard_price,
       (sum(name) * min(round(standard_price,2))) as inventory_value,
       case when valuation = 'Real Time' then (sum(name) * min(round(standard_price, 2))) else 0.00 end as rt_inventory_value,
       valuation, valuation_account_id
 from stock_move_by_location
group by location_id,product_id,company_id,categ_id,valuation,valuation_account_id
having round(sum(name),4) != 0 
;""")

stock_product_by_location()

class stock_product_by_location_prodlot(osv.osv):
     _name = "stock_product_by_location_prodlot"
     _description = "Product Stock Sum"
     _auto = False

     _columns = {
       'id'                 : fields.char    ('id',size=16, readonly=True),
       'location_id'        : fields.many2one('stock.location','Location', select=True, required=True, readonly=True),
       'product_id'         : fields.many2one('product.product','Product', select=True, required=True, readonly=True),
       'categ_id'           : fields.many2one('product.category','Product Category', select=True, readonly=True),
#       'categ_id'           : fields.related ('product_id','categ_id', type="many2one", relation="product.category", string='Category',readonly=True),
       'prodlot_id'         : fields.many2one('stock.production.lot', 'Production lot', readonly=True, select=True),
       'uom_id'             : fields.related ('product_id', 'uom_id', type="many2one", relation="product.uom", string="UoM", readonly = True ),
       'cost_method'        : fields.related ('product_id', 'cost_method', type="char", relation="product.product", string="Cost Method", readonly = True ),
       'name'               : fields.float   ('Quantity', digits=(16,2), readonly=True),
       'product_qty_pending': fields.float   ('Quantity Pending', digits=(16,2), readonly=True),
       'company_id': fields.many2one('res.company', 'Company', readonly=True),
       'standard_price': fields.float('Cost Price', digits=(16,4), readonly=True),
       'inventory_value': fields.float('Inventory Value', readonly=True),
       'rt_inventory_value': fields.float('RT Inv. Value', readonly=True),
       'valuation': fields.char('Inventory Valuation'),
       'valuation_account_id': fields.many2one('account.account','Valuation Account', select=True, readonly=True),
}
     _defaults = {
}


     
     def init(self, cr):
          drop_view_if_exists(cr, 'stock_product_by_location_prodlot')
          cr.execute("""create or replace view stock_product_by_location_prodlot
as
select min(id) as id ,location_id,product_id,prodlot_id,
       sum(name) as name, sum(product_qty_pending) as product_qty_pending, 
       company_id, categ_id, min(standard_price) as standard_price,
       (sum(name) * min(round(standard_price,2))) as inventory_value,
       case when valuation = 'Real Time' then (sum(name) * min(round(standard_price, 2))) else 0.00 end as rt_inventory_value,
       valuation, valuation_account_id
 from stock_move_by_location
where not(prodlot_id IS NULL)
group by location_id,prodlot_id,product_id,company_id,categ_id,valuation, valuation_account_id
having round(sum(name),4) != 0
;""")

stock_product_by_location_prodlot()

class stock_product(osv.osv):
     _name = "stock_product"
     _description = "Product Stock Sum"
     _auto = False

     _columns = {
       'id'                 : fields.char    ('id',size=16, readonly=True),
       'product_id'         : fields.many2one('product.product','Product', select=True, required=True, readonly=True),
       'name'               : fields.float   ('Quantity', digits=(16,2), readonly=True),
}
     _defaults = {
}

     def init(self, cr):
          drop_view_if_exists(cr, 'stock_product')
          cr.execute("""create or replace view stock_product
as
select min(id) as id ,product_id,
       sum(name) as name
 from stock_move_by_location
where not(prodlot_id IS NULL)
group by product_id
having round(sum(name),4) != 0
;""")

stock_product_by_location_prodlot()

class product_product(osv.osv):
    _inherit = "product.product"

    def _qty_available(self, cr, uid, ids, name, arg, context=None):
        res = {}
        for product in self.browse(cr, uid, ids):
	    if 'location' in context:
                res[product.id] = 0.0
                sql_stat = """select min(id) as id ,product_id,
       sum(name) as name
 from stock_move_by_location
where available_shortage = True and product_id = %d and location_id = %d
group by product_id""" % (product.id, context['location'])
                cr.execute(sql_stat)
                sql_res = cr.dictfetchone()
	    else:
                res[product.id] = 0.0
                sql_stat = """select min(id) as id ,product_id,
       sum(name) as name
 from stock_move_by_location
where available_shortage = True and product_id = %d
group by product_id""" % (product.id)
                cr.execute(sql_stat)
                sql_res = cr.dictfetchone()
            if sql_res:
	        res[product.id] = sql_res['name']
        return res

    _columns = {
        'stock_product_by_location_ids': fields.one2many('stock_product_by_location','product_id','Product by Stock '),
        'qty_available': fields.function(_qty_available, type='float', string='Quantity On Hand'),
    }

#copy must not copy stock_product_by_location_ids
    def copy (self, cr, uid, id, default={}, context=None):
        default = default.copy()
        default['stock_product_by_location_ids'] = []
#	default['default_code'] = None
        return super(product_product, self).copy(cr, uid, id, default, context)
    # end def copy

product_product()

class stock_location(osv.osv):
      _inherit = "stock.location"
      _columns = {
          'stock_product_by_location_ids': fields.one2many('stock_product_by_location','location_id','Product by Stock '),
      }

      def copy (self, cr, uid, id, default={}, context=None):
          default = default.copy()
          default['stock_product_by_location_ids'] = []
          return super(stock_location, self).copy (cr, uid, id, default, context)
      # end def copy

#copy must not copy stock_product_by_location_ids
stock_location()
